// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/tsdocs
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

import * as fs from 'fs-extra';
import * as path from 'path';
import {
  ApiDocsOptions,
  getPublicTSPackages,
  getUnscopedPackageName,
  LernaPackage,
} from './helper';

const DEFAULT_API_DOCS_PATH = 'docs/site/apidocs';

/**
 * Update markdown files generated by api-documenter to prepend Jekyll metadata
 * and generate `apidocs.index.md`.
 * @param options Options for api docs
 */
export async function updateApiDocs(options: ApiDocsOptions = {}) {
  options = Object.assign(
    {
      rootDir: process.cwd(),
      apiDocsPath: DEFAULT_API_DOCS_PATH,
    },
    options,
  );
  const packages = await getPublicTSPackages(options.rootDir);

  /* istanbul ignore if  */
  if (!packages.length) return;

  await generateIndex(packages, options);
  await addJekyllMetadata(packages[0].rootPath, options);
}

/**
 * Generate `index.md` for apidocs
 * @param packages Lerna packages
 * @param options Apidocs options
 */
async function generateIndex(
  packages: LernaPackage[],
  options: ApiDocsOptions,
) {
  const lernaRootDir = packages[0].rootPath;
  const apiDocs = [
    `---
lang: en
title: 'API docs'
keywords: LoopBack 4.0, LoopBack 4
sidebar: lb4_sidebar
permalink: /doc/en/lb4/apidocs.index.html
---

## API Docs`,
  ];

  for (const pkg of packages) {
    const pkgName = getUnscopedPackageName(pkg.name);
    apiDocs.push(`- [${pkg.name}](${pkgName}.md)`);
  }

  apiDocs.push('\n');

  /* istanbul ignore if  */
  if (options.dryRun) {
    console.log(apiDocs.join('\n'));
    return;
  }

  const apiDocsIndex = path.join(
    lernaRootDir,
    options.apiDocsPath!,
    'index.md',
  );
  await fs.ensureDir(path.resolve(apiDocsIndex, '..'));
  await fs.writeFile(apiDocsIndex, apiDocs.join('\n'));

  /* istanbul ignore if  */
  if (!options.silent) {
    console.log('%s is updated.', apiDocsIndex);
  }
}

/**
 * Prepend Jekyll metadata to markdown files
 * @param lernaRootDir Root directory for the monorepo
 * @param options Options for api docs
 */
async function addJekyllMetadata(
  lernaRootDir: string,
  options: ApiDocsOptions,
) {
  const apiDocsRoot = path.join(lernaRootDir, options.apiDocsPath!);
  const apiFiles = await fs.readdir(apiDocsRoot);
  for (const f of apiFiles) {
    /* istanbul ignore if  */
    if (!options.silent) {
      console.log('Updating %s', f);
    }
    /* istanbul ignore if  */
    if (!f.endsWith('.md') || f === 'index.md') continue;
    const name = f.replace(/\.md$/, '');
    const docFile = path.join(apiDocsRoot, f);
    let doc = await fs.readFile(docFile, 'utf-8');
    doc = `---
lang: en
title: 'API docs: ${name}'
keywords: LoopBack 4.0, LoopBack 4
sidebar: lb4_sidebar
permalink: /doc/en/lb4/apidocs.${name}.html
---

${doc}
`;
    if (!options.dryRun) {
      await fs.writeFile(docFile, doc, 'utf-8');
    }
  }
}
